import os
import time
import sys
import random
from datetime import datetime
from rich.console import Console
import re
import threading

# ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÉŸàŸÜÿ≥ŸàŸÑ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸá ŸÅŸä ÿßŸÑÿ∑ÿ®ÿßÿπÿ©
console = Console()

def random_color():
    """ÿßÿÆÿ™Ÿäÿßÿ± ŸÑŸàŸÜ ÿπÿ¥Ÿàÿßÿ¶Ÿä ŸÖŸÜ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ŸÑŸàÿßŸÜ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©"""
    colors = ["red", "green", "blue", "yellow", "magenta", "cyan", "white", "bright_red", "bright_green", "bright_blue"]
    return random.choice(colors)

def print_colored_message(message):
    """ÿ∑ÿ®ÿßÿπÿ© ÿ±ÿ≥ÿßŸÑÿ© ÿ®ÿ£ŸÑŸàÿßŸÜ ÿπÿ¥Ÿàÿßÿ¶Ÿäÿ©"""
    color = random_color()  # ÿßÿÆÿ™ÿ± ŸÑŸàŸÜ ÿπÿ¥Ÿàÿßÿ¶Ÿä
    console.print(f"[{color}]{message}[/{color}]")

def login():
    """Ÿàÿßÿ¨Ÿáÿ© ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ"""
    password = "saed_505"
    print_colored_message("\nüîë Please login to proceed.")
    entered_password = input("Enter password: ").strip()

    if entered_password == password:
        print_colored_message("‚úÖ Login successful!")
        return True
    else:
        print_colored_message("‚ùå Incorrect password! Exiting...")
        exit()

def stop_tool_at(date_time):
    """ÿ™ÿ≠ÿØŸäÿØ ŸàŸÇÿ™ ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ£ÿØÿßÿ©"""
    current_time = datetime.now()
    stop_time = datetime.strptime(date_time, "%Y-%m-%d %H:%M:%S")
    
    if current_time >= stop_time:
        print_colored_message(f"\n‚è≥ The tool has reached its stop time ({stop_time}). Exiting...")
        exit()
    
    while datetime.now() < stop_time:
        remaining_time = stop_time - datetime.now()
        time.sleep(1)

def welcome_message():
    """ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ™ÿ±ÿ≠Ÿäÿ® ŸÖÿπ ÿ™ÿ£ÿ´Ÿäÿ± ÿßŸÑÿ≠ÿ±ŸÉÿ©"""
    welcome_text = "Welcome to the JOKER tool!"
    for char in welcome_text:
        sys.stdout.write(char)
        sys.stdout.flush()
        time.sleep(0.05)  # ÿ≥ÿ±ÿπÿ© ÿßŸÑÿ≠ÿ±ŸÉÿ© ŸÑŸÉŸÑ ÿ≠ÿ±ŸÅ
    print("\n")
    time.sleep(1)

def list_files(directory):
    """ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸÑŸÅÿßÿ™ ŸÅŸä ÿßŸÑÿØŸÑŸäŸÑ ÿßŸÑŸÖÿ≠ÿØÿØ"""
    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
    return files

def modify_pak(file_path, weapon_codes, output_directory):
    """ÿ™ÿπÿØŸäŸÑ ŸÖŸÑŸÅ .pak ÿ®ÿßÿ≥ÿ™ÿ®ÿØÿßŸÑ ÿ£ŸÉŸàÿßÿØ ÿßŸÑÿ£ÿ≥ŸÑÿ≠ÿ©"""
    with open(file_path, "rb") as f:
        data = f.read()

    hex_data = data.hex().upper()
    modified_data = bytearray(data)

    for weapon_code in weapon_codes:
        hex_code = ' '.join(f"{ord(c):02X}" for c in weapon_code)
        hex_code = hex_code.replace(" ", "")
        
        occurrences = list(re.finditer(hex_code, hex_data))

        if not occurrences:
            print_colored_message(f"‚ö†Ô∏è Weapon code {weapon_code} not found.")
        else:
            for match in occurrences:
                start_index = match.start()
                byte_index = start_index // 2
                for i in range(len(weapon_code)):
                    modified_data[byte_index + i] = 0x00
            print_colored_message(f"‚úÖ Weapon code {weapon_code} modified successfully.")

    os.makedirs(output_directory, exist_ok=True)
    output_file_path = os.path.join(output_directory, os.path.basename(file_path))
    with open(output_file_path, "wb") as f:
        f.write(modified_data)

    print_colored_message(f"\nüöÄ Modification completed! New file saved at: {output_file_path}")

def show_main_menu():
    """ÿπÿ±ÿ∂ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ŸÑŸÑÿ£ÿØÿßÿ©"""
    print_colored_message("""
           üî• JOKER Tool - PUBG Pak Modifier üî•
===============================
Please choose an option:
1. Modify .pak files
2. Join my Telegram channel
3. View statistics
4. Exit
===============================
""")

def handle_main_menu_choice(choice):
    """ÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÅŸä ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©"""
    if choice == '1':
        print_colored_message("\nüîß You chose to modify weapons!")
        modify_pak_file()
    elif choice == '2':
        print_colored_message("\nüîó Join my Telegram channel: https://t.me/joker_505_vip")
    elif choice == '3':
        print_colored_message("\nüìä View statistics: Here you could show stats if you wish")
    elif choice == '4':
        print_colored_message("\nüëã Exiting... See you next time!")
        exit()
    else:
        print_colored_message("\n‚ùå Invalid choice! Please choose a valid option.")
        return False  # Need to try again
    return True

def show_weapon_menu():
    """ÿπÿ±ÿ∂ ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ÿ≥ŸÑÿ≠ÿ© ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿßÿÆÿ™Ÿäÿßÿ±Ÿáÿß"""
    print_colored_message("""
    üî´ Choose a weapon to modify:
    1. AKM
    2. M146
    3. HK416
    4. MK14
    5. M16A4
    6. M762
    7. QBZ
    8. SCAR
    9. DP12
    10. FAMAS
    11. Groza
    12. M249
    13. SKS
    14. VSS
    15. Custom weapon (you enter the code)
    """)

def modify_weapon_codes(choice):
    """ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ£ŸÉŸàÿßÿØ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ±"""
    weapon_dict = {
        '1': "C__AKM",
        '2': "C__M146",
        '3': "C__HK416",
        '4': "MK14",
        '5': "C__M16A4",
        '6': "C__M762",
        '7': "C__QBZ",
        '8': "C__SCAR",
        '9': "C__DP12",
        '10': "C__FAMAS",
        '11': "C__Groza",
        '12': "C__M249",
        '13': "C__SKS",
        '14': "C__VSS",
        '15': "Custom"  # ÿßŸÑÿÆŸäÿßÿ± ŸÑÿµŸÜÿπ ÿ≥ŸÑÿßÿ≠ ŸÖÿÆÿµÿµ
    }

    if choice in weapon_dict:
        if choice == '15':
            custom_code = input("Enter your custom weapon code: ").strip()
            return [custom_code]
        else:
            weapon_code = weapon_dict[choice]
            return [weapon_code]
    else:
        print_colored_message("‚ùå Invalid weapon choice!")
        return []

def modify_pak_file():
    """ÿ™ÿπÿØŸäŸÑ ŸÖŸÑŸÅ .pak"""
    base_path = "/storage/emulated/0/Download/saed"
    output_path = os.path.join(base_path, "Content", "Paks")

    if not os.path.exists(base_path):
        os.makedirs(base_path, exist_ok=True)

    files = list_files(base_path)

    if not files:
        print_colored_message("‚ùå No files found in the directory.")
    else:
        print_colored_message("\nüìÇ Select a file to modify:")
        for i, file in enumerate(files):
            print_colored_message(f"{i + 1}. {file}")

        choice = input("\nEnter the number of the file: ")

        choice = int(choice) - 1
        if 0 <= choice < len(files):
            file_path = os.path.join(base_path, files[choice])

            show_weapon_menu()
            weapon_choice = input("\nEnter weapon number to modify: ")
            weapon_codes = modify_weapon_codes(weapon_choice)

            if weapon_codes:
                modify_pak(file_path, weapon_codes, output_path)
        else:
            print_colored_message("‚ùå Invalid selection.")
            modify_pak_file()

def run_tool():
    """ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ£ÿØÿßÿ© ŸÖÿπ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑÿå ÿ•ŸäŸÇÿßŸÅ ÿßŸÑÿ£ÿØÿßÿ©ÿå ŸàŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿÆŸäÿßÿ±ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©"""
    login()  # ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ
    threading.Thread(target=stop_tool_at, args=("2025-03-18 12:00:00",), daemon=True).start()  # ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑŸàŸÇÿ™ ŸÅŸä ÿßŸÑÿÆŸÑŸÅŸäÿ©
    welcome_message()  # ÿπÿ±ÿ∂ ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑÿ™ÿ±ÿ≠Ÿäÿ®
    while True:
        show_main_menu()
        choice = input("Enter your choice [1/2/3/4]: ")
        if handle_main_menu_choice(choice):
            break  # Ÿäÿ™ŸÖ ÿßŸÑÿπŸàÿØÿ© ŸÑŸÑŸÇÿßÿ¶ŸÖÿ© ÿ•ÿ∞ÿß ÿ™ŸÖ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ± ÿ®ŸÜÿ¨ÿßÿ≠

run_tool()  # ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ£ÿØÿßÿ©
